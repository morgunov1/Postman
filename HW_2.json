{
	"info": {
		"_postman_id": "203e54ce-33b4-4e2b-a93d-401ae821749b",
		"name": "HW_2(scripts)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//http://162.55.220.72:5005/first\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный [в смысле, содержание] string.\r",
							"pm.test(\"Correct string in the body\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");                                    //способ №1\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"\tpm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");                    //способ №2\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let responseJSON = pm.response.json();\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(responseJSON.name).to.eql(\"Test\");\r",
							"});\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(parseInt(responseJSON.age)).to.eql(33);\r",
							"});\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(responseJSON.salary).to.eql(300);\r",
							"});\r",
							"// 7. Спарсить request.\r",
							"let MYrequestfromFormData = request.data;\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(responseJSON.name).to.eql(MYrequestfromFormData.name);\r",
							"} );\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(responseJSON.age).to.eql(MYrequestfromFormData.age);\r",
							"} );\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(String(responseJSON.salary)).to.eql(MYrequestfromFormData.salary);\r",
							"} );\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(responseJSON.family);\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"u_salary_1_5_ in response, equal salary*4\", function () { \r",
							"   pm.expect(responseJSON.family.u_salary_1_5_year).to.eql(MYrequestfromFormData.salary*4)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Test",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "300",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"var responseJSON = pm.response.json();\r",
							"// 4. Спарсить request.\r",
							"var MYrequestfromURL = pm.request.url.query.toObject();\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(responseJSON.name).to.eql(MYrequestfromURL.name);\r",
							"} );\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(responseJSON.age).to.eql(MYrequestfromURL.age);\r",
							"} );\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(responseJSON.salary).to.eql(parseInt(MYrequestfromURL.salary));\r",
							"} );\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(responseJSON.family);\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"PetNameExist\", function () {\r",
							"    pm.expect(responseJSON.family.pets.dog).hasOwnProperty(\"name\");\r",
							"} );\r",
							"// 10. Проверить, что у параметра dog есть параметр age.\r",
							"pm.test(\"PetAgeExist\", function () {\r",
							"    pm.expect(responseJSON.family.pets.dog).hasOwnProperty(\"age\");\r",
							"} );\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"PetName = Luky\", function () {\r",
							"    pm.expect(responseJSON.family.pets.dog.name).to.include(\"Luky\");\r",
							"} );\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"PetsAge = 4\", function () {\r",
							"    pm.expect(responseJSON.family.pets.dog.age).to.eql(parseInt(\"4\"));\r",
							"} );"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Test&age=33&salary=300",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Test"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "300"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_4\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"var responseJSON = pm.response.json();\r",
							"// 4. Спарсить request.\r",
							"var MYrequestfromURL = pm.request.url.query.toObject();\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(responseJSON.name).to.eql(MYrequestfromURL.name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(responseJSON.age).to.eql(parseInt(MYrequestfromURL.age));\r",
							"});\r",
							"// 7. Вывести в консоль параметр salary из request (вывод: 300).\r",
							"console.log(MYrequestfromURL.salary);\r",
							"// 8. Вывести в консоль параметр salary из response (вывод раскрываемый список: (3) [300, \"600\", \"900\"]).\r",
							"console.log(responseJSON.salary);\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response (вывод: 300).\r",
							"console.log(responseJSON.salary[0]);\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response (вывод: 600).\r",
							"console.log(responseJSON.salary[1]);\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response (вывод: 900).\r",
							"console.log(responseJSON.salary[2]);\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Salary equal\", function () {\r",
							"    pm.expect(responseJSON.salary[0]).to.eql(parseInt(MYrequestfromURL.salary));\r",
							"});\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary equal * 2\", function () {\r",
							"    pm.expect(parseInt(responseJSON.salary[1])).to.eql(parseInt(MYrequestfromURL.salary) * 2);\r",
							"});\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary equal * 3\", function () {\r",
							"    pm.expect(parseInt(responseJSON.salary[2])).to.eql(parseInt(MYrequestfromURL.salary) * 3);\r",
							"});\r",
							"// 15. Создать в окружении переменную name.      // 18. Передать в окружение переменную name.\r",
							"//pm.environment.set(\"name\", \"Test\");\r",
							"pm.environment.set(\"name\", responseJSON.name);\r",
							"// 16. Создать в окружении переменную age.       // 19. Передать в окружение переменную age.\r",
							"//pm.environment.set(\"age\", \"33\");\r",
							"pm.environment.set(\"age\", responseJSON.age);\r",
							"// 17. Создать в окружении переменную salary.    // 20. Передать в окружение переменную salary.\r",
							"//pm.environment.set(\"salary\", \"300\");\r",
							"pm.environment.set(\"salary\", responseJSON.salary[0]);\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary (вывод списком: 300, \"600\", \"900\").\r",
							"let obj = responseJSON.salary\r",
							"for (let key in obj) {\r",
							"\tconsole.log(obj[key])\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Test&age=33&salary=300",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Test"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "300"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_2\r",
							"// 1. Вставить параметр salary из окружения в request.\r",
							"// 2. Вставить параметр age из окружения в age.\r",
							"// 3. Вставить параметр name из окружения в name.\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"var responseJSON = pm.response.json();\r",
							"// 7. Спарсить request.\r",
							"var requestJSON = request.data;\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"start_qa_salary_Exist\", function () {\r",
							"    pm.expect(responseJSON).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"qa_salary_after_6_Exist\", function () {\r",
							"    pm.expect(responseJSON).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"qa_salary_after_12_Exist\", function () {\r",
							"    pm.expect(responseJSON).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"qa_salary_after_1.5y_Exist\", function () {\r",
							"    pm.expect(responseJSON).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"qa_salary_after_3.5y_Exist\", function () {\r",
							"    pm.expect(responseJSON).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"person_Exist\", function () {\r",
							"    pm.expect(responseJSON).to.have.property(\"person\");\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary Eql reqSalary\", function () {\r",
							"    pm.expect(responseJSON.start_qa_salary).to.eql(parseInt(requestJSON.salary));\r",
							"});\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6 Eql reqSalary*2\", function () {\r",
							"    pm.expect(responseJSON.qa_salary_after_6_months).to.eql(parseInt(requestJSON.salary) * 2);\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12 Eql reqSalary*2,7\", function () {\r",
							"    pm.expect(responseJSON.qa_salary_after_12_months).to.eql(parseInt(requestJSON.salary) * 2.7);\r",
							"});\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5y Eql reqSalary*3,3\", function () {\r",
							"    pm.expect(responseJSON[\"qa_salary_after_1.5_year\"]).to.eql(parseInt(requestJSON.salary) * 3.3);\r",
							"});\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5y Eql reqSalary*3,8\", function () {\r",
							"    pm.expect(responseJSON[\"qa_salary_after_3.5_years\"]).to.eql(parseInt(requestJSON.salary) * 3.8);\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"person.u_name[1] Eql reqSalary\", function () {\r",
							"    pm.expect(responseJSON.person.u_name[1]).to.eql(parseInt(requestJSON.salary));\r",
							"});\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"person.u_age Eql reqAge\", function () {\r",
							"    pm.expect(responseJSON.person.u_age).to.eql(parseInt(requestJSON.age));\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"person.u_salary_5_years\", function () {\r",
							"    pm.expect(responseJSON.person.u_salary_5_years).to.eql(parseInt(requestJSON.salary) * 4.2);\r",
							"});\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"let nkvd = responseJSON.person\r",
							"for (let key in nkvd){\r",
							"console.log(key, nkvd[key])\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]